package vision

import (
	"context"
	"log"
	"time"

	"cluely/internal/config"
)

// Module —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—Ö–≤–∞—Ç–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ OCR –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
type Module struct {
	cfg         config.VisionConfig
	ocrEngine   OCREngine
	screenshots chan []byte
	stopCh      chan struct{}
	isRunning   bool
}

func NewModule(cfg config.VisionConfig) *Module {
	return &Module{
		cfg:         cfg,
		screenshots: make(chan []byte, 10),
		stopCh:      make(chan struct{}),
	}
}

func (m *Module) Start(ctx context.Context) error {
	if !m.cfg.Enabled {
		log.Println("‚è≠Ô∏è  Vision module disabled")
		return nil
	}

	// –°–æ–∑–¥–∞–µ–º OCR –¥–≤–∏–∂–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥–∞
	ocrEngine, err := NewOCREngine(m.cfg.OCREngine, m.cfg.OCRConfig)
	if err != nil {
		return err
	}

	if err := ocrEngine.Initialize(); err != nil {
		return err
	}

	m.ocrEngine = ocrEngine
	m.isRunning = true

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
	go m.simulateScreenshotCapture(ctx)

	log.Printf("‚úÖ Vision Module started (OCR engine: %s)", m.cfg.OCREngine)
	return nil
}

func (m *Module) simulateScreenshotCapture(ctx context.Context) {
	// –í mock —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
	ticker := time.NewTicker(10 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case <-m.stopCh:
			return
		case <-ticker.C:
			// –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —ç—Ç–æ –±—ã–ª –±—ã bytes –æ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
			dummyScreenshot := []byte("mock_screenshot_data")
			select {
			case m.screenshots <- dummyScreenshot:
				log.Println("üì∏ Mock screenshot captured")
			case <-ctx.Done():
				return
			}
		}
	}
}

func (m *Module) ExtractText(ctx context.Context, imageData []byte) (string, error) {
	if m.ocrEngine == nil {
		return "", nil
	}
	return m.ocrEngine.ExtractText(ctx, imageData)
}

func (m *Module) ScreenshotChannel() <-chan []byte {
	return m.screenshots
}

func (m *Module) Stop() {
	if !m.isRunning {
		return
	}

	m.isRunning = false
	close(m.stopCh)

	if m.ocrEngine != nil {
		m.ocrEngine.Close()
	}

	close(m.screenshots)
	log.Println("üõë Vision Module stopped")
}
