package ai

import (
	"context"
	"log"
	"time"
)

// MockAIProvider –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É AI –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
type MockAIProvider struct {
	counter int
}

func NewMockAIProvider() *MockAIProvider {
	return &MockAIProvider{counter: 0}
}

func (m *MockAIProvider) Analyze(ctx context.Context, input AnalysisInput) (AnalysisOutput, error) {
	m.counter++

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
	var hint string
	var tasks []string
	var warnings []string

	if input.Type == "audio" {
		// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
		if contains(input.TranscriptText, "CPU") {
			hint = "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! –†–µ–∫–æ–º–µ–Ω–¥—É–π –ø—Ä–æ–≤–µ—Ä–∏—Ç—å top -H –∏ recent deploys."
			tasks = []string{
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: top -H",
				"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–ª–æ–∏",
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å memory leaks",
			}
			warnings = []string{"–í–æ–∑–º–æ–∂–µ–Ω DDoS –∏–ª–∏ infinite loop"}
		} else if contains(input.TranscriptText, "Memory leak") {
			hint = "üî¥ Memory leak –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –í—ã–ø–æ–ª–Ω–∏ –æ—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∫–æ–º–º–∏—Ç—É –∏ –ø—Ä–æ–≤–µ—Ä—å heap dump."
			tasks = []string{
				"–í—ã–ø–æ–ª–Ω–∏—Ç—å git rollback",
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å heap dump",
				"–ó–∞–ø—É—Å—Ç–∏—Ç—å memory profiler",
			}
			warnings = []string{"–û—Ç–∫–∞—Ç –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É", "–ü—Ä–æ–≤–µ—Ä—å dependencies –ø–µ—Ä–µ–¥ –æ—Ç–∫–∞—Ç–æ–º"}
		} else if contains(input.TranscriptText, "–æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è") {
			hint = "üîÑ –ü–µ—Ä–µ–¥ –æ—Ç–∫–∞—Ç–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –≤—Å–µ ongoing transactions."
			tasks = []string{
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å active transactions",
				"–°–æ–∑–¥–∞—Ç—å backup —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
				"–í—ã–ø–æ–ª–Ω–∏—Ç—å rollback",
			}
			warnings = []string{"–ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è downtime", "–£–≤–µ–¥–æ–º–∏—Ç—å stakeholders"}
		} else if contains(input.TranscriptText, "Database") {
			hint = "üíæ Database issue! –ü—Ä–æ–≤–µ—Ä—å connection pool –∏ query performance."
			tasks = []string{
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å connection pool: SHOW PROCESSLIST",
				"–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å slow queries",
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å disk space",
			}
			warnings = []string{"–í–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—é"}
		} else if contains(input.TranscriptText, "API") {
			hint = "üåê API issue! –ü—Ä–æ–≤–µ—Ä—å endpoints availability –∏ load balancer."
			tasks = []string{
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API health endpoints",
				"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ load balancer'–∞",
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limits",
			}
			warnings = []string{"–í–æ–∑–º–æ–∂–µ–Ω rate limiting", "–ü—Ä–æ–≤–µ—Ä—å DNS resolution"}
		} else {
			hint = "‚ÑπÔ∏è –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (top, netstat, curl)."
			tasks = []string{
				"–°–æ–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
				"–ü—Ä–æ–≤–µ—Å—Ç–∏ –±–∞–∑–æ–≤—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É",
			}
			warnings = []string{"–°–æ–±–µ—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"}
		}
	} else if input.Type == "vision" {
		// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
		if contains(input.OCRText, "ERROR") || contains(input.OCRText, "error") {
			hint = "üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ ERROR –≤ –ª–æ–≥–∞—Ö! –û–ø—Ä–µ–¥–µ–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å stack trace."
			tasks = []string{
				"–ù–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—à–∏–±–∫–∏",
				"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π stack trace",
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å related errors",
			}
			warnings = []string{"–ú–æ–∂–µ—Ç –±—ã—Ç—å cascade failure"}
		} else if contains(input.OCRText, "95%") || contains(input.OCRText, "CPU") {
			hint = "üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –º–µ—Ç—Ä–∏–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: CPU/Memory –Ω–∞ —É—Ä–æ–≤–Ω–µ 95%+. –°—Ä–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä—å top!"
			tasks = []string{
				"–í—ã–ø–æ–ª–Ω–∏—Ç—å: top -H | head -20",
				"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º usage",
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å network I/O",
			}
			warnings = []string{"–°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Å–∫–æ—Ä–æ —É–ø–∞—Å—Ç—å", "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –∞–≤–∞—Ä–∏–π–Ω–æ–º—É –æ—Ç–∫–∞—Ç—É"}
		} else if contains(input.OCRText, "CrashLoopBackOff") {
			hint = "üí• Pod –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ CrashLoopBackOff! –ü—Ä–æ–≤–µ—Ä—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –∏ events."
			tasks = []string{
				"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å pod events: kubectl describe pod",
				"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏: kubectl logs",
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å resource limits",
			}
			warnings = []string{"–í–æ–∑–º–æ–∂–Ω–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤", "–ü—Ä–æ–≤–µ—Ä—å health checks"}
		} else if contains(input.OCRText, "503") || contains(input.OCRText, "Unavailable") {
			hint = "‚ö†Ô∏è Service Unavailable (503). –ü—Ä–æ–≤–µ—Ä—å backend status –∏ load balancer configuration."
			tasks = []string{
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å health endpoints –≤—Å–µ—Ö backend'–æ–≤",
				"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ load balancer'–∞",
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å network connectivity",
			}
			warnings = []string{"–í–æ–∑–º–æ–∂–µ–Ω cascading failure"}
		} else {
			hint = "üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–µ–Ω–¥—ã –∏ —Å—Ä–∞–≤–Ω–∏ —Å baseline'–æ–º."
			tasks = []string{
				"–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å anomalies",
				"–°—Ä–∞–≤–Ω–∏—Ç—å —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
				"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å correlation —Å recent changes",
			}
			warnings = []string{}
		}
	}

	log.Printf("ü§ñ Mock AI #%d (type=%s): %s", m.counter, input.Type, hint)

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É AI –∞–Ω–∞–ª–∏–∑–∞
	select {
	case <-time.After(1000 * time.Millisecond):
		return AnalysisOutput{
			Hint:       hint,
			Tasks:      tasks,
			Warnings:   warnings,
			Confidence: 0.85,
		}, nil
	case <-ctx.Done():
		return AnalysisOutput{}, ctx.Err()
	}
}

func (m *MockAIProvider) Health(ctx context.Context) error {
	log.Println("ü§ñ Mock AI Provider is healthy")
	return nil
}

func contains(s, substr string) bool {
	for i := 0; i < len(s)-len(substr)+1; i++ {
		if s[i:i+len(substr)] == substr {
			return true
		}
	}
	return false
}
