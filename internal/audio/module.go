package audio

import (
	"context"
	"fmt"
	"log"
	"time"

	"cluely/internal/config"
)

type Module struct {
	cfg            config.AudioConfig
	transcriptChan chan string
	transcriber    Transcriber
	stopChan       chan struct{}
}

func NewModule(cfg config.AudioConfig) *Module {
	return &Module{
		cfg:            cfg,
		transcriptChan: make(chan string, 10),
		stopChan:       make(chan struct{}),
	}
}

func (m *Module) Start(ctx context.Context) error {
	if !m.cfg.Enabled {
		log.Println("‚è≠Ô∏è  Audio module disabled")
		return nil
	}

	// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä
	transcriber, err := NewTranscriber(m.cfg.TranscriberType, m.cfg.TranscriberConfig)
	if err != nil {
		return fmt.Errorf("failed to create transcriber: %w", err)
	}

	if err := transcriber.Initialize(); err != nil {
		return fmt.Errorf("failed to initialize transcriber: %w", err)
	}

	m.transcriber = transcriber
	log.Printf("‚úÖ Transcriber initialized: %s", m.cfg.TranscriberType)

	// –ü–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ
	go m.simulateCaptureLoop(ctx)

	return nil
}

func (m *Module) simulateCaptureLoop(ctx context.Context) {
	log.Println("üéôÔ∏è  Audio capture simulation started")
	ticker := time.NewTicker(10 * time.Second)
	defer ticker.Stop()

	testPhrases := []string{
		"–£ –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–æ–º",
		"–ù—É–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é",
		"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Grafana",
		"CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—ã—à–µ 90 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤",
	}

	i := 0
	for {
		select {
		case <-ctx.Done():
			return
		case <-m.stopChan:
			return
		case <-ticker.C:
			// –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
			phrase := testPhrases[i%len(testPhrases)]
			i++

			log.Printf("üéôÔ∏è  Simulated audio: %s", phrase)
			m.transcriptChan <- phrase
		}
	}
}

func (m *Module) TranscriptChannel() <-chan string {
	return m.transcriptChan
}

func (m *Module) Stop() {
	close(m.stopChan)

	if m.transcriber != nil {
		m.transcriber.Close()
	}

	close(m.transcriptChan)
}
