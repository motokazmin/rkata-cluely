package audio

import (
	"context"
	"log"
	"time"
)

// MockTranscriber –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
type MockTranscriber struct {
	counter int
}

func NewMockTranscriber() *MockTranscriber {
	return &MockTranscriber{counter: 0}
}

func (m *MockTranscriber) Initialize() error {
	log.Println("üé§ MockTranscriber initialized")
	return nil
}

func (m *MockTranscriber) Transcribe(ctx context.Context, audioData []byte) (string, error) {
	m.counter++

	// –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
	mockTranscripts := []string{
		"–£ –Ω–∞—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å CPU. –ù–∞–≥—Ä—É–∑–∫–∞ 95 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤!",
		"Memory leak –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¥–µ–ø–ª–æ–π–µ. –ù—É–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è.",
		"–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ /var/log/app.log",
		"Database connection timeout. –í–æ–∑–º–æ–∂–Ω–æ, network issue.",
		"API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500 –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å.",
	}

	transcript := mockTranscripts[m.counter%len(mockTranscripts)]
	log.Printf("üé§ Mock Transcribe #%d: %s", m.counter, transcript)

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
	select {
	case <-time.After(500 * time.Millisecond):
		return transcript, nil
	case <-ctx.Done():
		return "", ctx.Err()
	}
}

func (m *MockTranscriber) Close() error {
	log.Println("üé§ MockTranscriber closed")
	return nil
}
